	.mcall	.print .ttyin .exit
	.enabl	LC
	.list	MEB	; enable macro-extensions binary listing

VADDR:	.word	0	; video addr
VADEN:	.word	0	; video addr + 100000
DEMNUM:	.word	0	; demo number

PPCOMM:	.word	0	; PPU command
TICK50:	.word	0	; 50Hz ticks counter
FRAMES:	.word	0	; frames counter
VSIOLD:	.word	0	; old vsync interrupt addr

; demos addresses
DEMTAB:	.word	KOSICH, RIPLES

MSG000:	.ascii	<12>/Demo select:/<12><15>
	.ascii	/1 - Adaptation of Kosi4ka BK-0010 256-byte intro by Manwe/<57>/SandS/<12><15>
	.ascii	/2 - Ripples/<12><15>
	.asciz	/0 - Exit/<12><15>
MSG010:	.asciz	/ERR: PPU allocate memory failed/
MSGCLS: .byte	033, 014, 110, 0
	.even

; //////////////////////////////////////////////////////////////////////////////
; // START
; //////////////////////////////////////////////////////////////////////////////

START:	.print	#Msg000			; helloworld!!111one
	bis	#10000, @#44		; don't echo keys
2$:	.ttyin				; input char -> R0
	cmp	R0, #'0
	blo	2$
	cmp	R0, #'2
	bhi	2$
	sub	#'0, R0
	bne	10$
	.exit

10$:	; prepare
	mov	R0, DemNum		; demo number
	.print	#MsgCls			; we needed THIS!!! or else keys and print buffer will be stuck

	; adjust vaddr start and end (align them with 128 bytes)
	mov	#VBUF, VADDR
	add	#128., VADDR
	bic	#^B01111111, VADDR
	mov	VADDR, VADEN
	add	#100000, VADEN
	; clear vbuf
	mov	VADDR, R1
	mov	#257.*64., R3		; yes it's 257! (instead of 256)
	clr	(R1)+
	sob	R3, .-2

	; run PPU code
	mov	#1, PPCOMM		; ask PPU for 'phase 1 ready'
	mov	#PPUSTA, R4		; run PPU code
	mov	#<PPUEND-PPUSTA/2>, R5
	call	PPRUN
	tst	PPCOMM			; wait for 'ppu phase 1 ready'
	bne	.-4			; TODO: check timer to not wait forever?
	; set PPU flag to 'running'
	inc	PPCOMM			; PPU will clear this after key is pressed

	; set vsync interrupt for FPS counting
	mov	@#100, VSIOLD
	mov	#VSYNCI, @#100
	clr	TICK50

	; go go go...
	mov	DEMNUM, R0
	dec	R0
	asl	R0
	call	@DEMTAB(R0)

	; clear PPU RAM
	call	PPRELE			; release PPU memory

	; restore vsync interrupt
	mov	VSIOLD, @#100

	.exit

; 50Hz interrupt
VSYNCI:	inc	TICK50
	rti

MsgFp8:	.asciz	/00:00/
	.even

Font8:	.byte	0, 76, 147, 147, 147, 147, 177, 76
	.byte	0, 30, 34, 34, 30, 30, 176, 176
	.byte	0, 76, 163, 70, 34, 16, 177, 177
	.byte	0, 176, 60, 30, 60, 147, 177, 76
	.byte	0, 3, 3, 73, 177, 70, 70, 70
	.byte	0, 177, 7, 77, 140, 147, 177, 76
	.byte	0, 76, 7, 77, 147, 147, 177, 76
	.byte	0, 177, 161, 70, 34, 16, 7, 7
	.byte	0, 76, 147, 76, 147, 147, 177, 76
	.byte	0, 76, 147, 147, 176, 70, 34, 16
	.byte	0, 0, 0, 0, 0, 30, 30, 0
	.even 

; print string
; R0 - text addr
PriSt8:	mov	VADDR, R5
	add	#128.+10., R5
	mov	#64.*2., R2		; vaddr addition is 64 words
10$:	movb	(R0)+, R1		; get text byte
	beq	99$			; zero - exit
	sub	#'0, R1			; relative to '0'
	asl	R1			; *8 bytes (character font size)
	asl	R1
	asl	R1
	add	#Font8, R1		; R1 = font data
	.rept	8.			; out character
	movb	(R1)+, (R5)
	add	R2, R5
	.endr
	sub	#64.*2.*8.-2, R5	; advance vaddr
	br	10$
99$:	return 

; put 2 digits string
; R5 - where to put, R0 - number
Digi2:
	cmp	R0, #99.
	blos	10$
	mov	#99., R0
10$:	movb	#'0, (R5)+
	movb	#'0, (R5)+
20$:	mov	R0, R1
	clr	R0
	div	#10., R0
	add	#'0, R1
	movb	R1, -(R5)
	tst	R0
	bne	20$
	return

; count fps
CouFps:	mov	Frames, R0
	mul	#50., R0
	div	Tick50, R0
	; R0=FPS R1=FPS%TICK50
	mov	R1, -(SP)
	mov	#MsgFp8, R5
	call	Digi2
	mov	(SP)+, R0	; convert %TICK50 to hundreds
	mul	#100., R0	; *100/TICK50 = hundreds
	div	Tick50, R0	;
	mov	#MsgFp8+3, R5
	call	Digi2
	return

; //////////////////////////////////////////////////////////////////////////////
; // CPU -> PPU exchange	
; //////////////////////////////////////////////////////////////////////////////

; PPU message
;
PPMSG:	.WORD	PPARR	; address of beginning of array
        .WORD	177777	; end of transmission

; PPU data exchange array
;
PPARR:	.BYTE	0	; return value (0 - OK)
PPCMD:	.BYTE	0	; command
	.WORD	32	; device type (32 - PPU mem)
PPAPP:	.WORD	0	; address for PPU
PPACP:	.WORD	0	; address for CPU
PPLEN:	.WORD	0	; length in words

; send command to PPU with exch array
PPSEN:	mov	R0, -(SP)
	mov	R1, -(SP)
	mov	#PPMSG, R0	; array address
	mov	#5, R1		; bytes to send+1 (sending from @#PP_MSG)
	br	1$
2$:	movb	(R0)+, @#176676
1$:	tstb	@#176674	; test if we are ready to send
	bpl	1$		; cycle if >= 0 (not set last bit in byte)
	sob	R1, 2$
	mov	(SP)+, R1
	mov	(SP)+, R0
	return

; send and start PPU code
; R4 - start addr in CPU
; R5 - length / 2
PPRUN:	movb	#1, PPCMD	; 1 - allocate memory
	mov	R5, PPLEN
	call	PPSEN
	tstb	PPARR		; test if allocate success
	beq	1$		; 0 - OK
	.print	#MSG010
	.exit			; fatal error - out of memory in PPU
1$:	movb	#20, PPCMD	; 20 - write to PPU mem
	mov	R5, PPLEN
	mov 	R4, PPACP
	call	PPSEN
	movb	#30, PPCMD	; 30 - run
	call	PPSEN
	return

; release PPU memory in case of something..
PPRELE:	movb	#2, PPCMD	; 2 - release memory
	call	PPSEN
	return


; //////////////////////////////////////////////////////////////////////////////	
; // PPU first phase 
; //////////////////////////////////////////////////////////////////////////////

PPUSTA:	mov	PC, R0
	add	#INTKB1-., R0		; keyboard interrupt addr
	mov	@#300, BKW300		; replace keyboard interrupt
	mov	R0, @#300
	; construct our own lines table	
	mov	PC, R0
	add	#PPLIN1-., R0
	add	#10, R0			; align addr with 8. bytes
	bic	#7, R0
	mov	R0, R2			; save addr and use later
	; 1st element - set palette (YRGB YRGB YRGB YRGB)
	;                           (0011 0010 0001 0000)
	;                           (0111 0110 0101 0100)
	mov	#^B1001100110001000, (R0)+
	mov	#^B1100110010101010, (R0)+
	clr	(R0)+			; vaddr is not used here
	mov	R0, (R0)		; next element addr
	add	#2, (R0)
	bis	#2, (R0)+		; #2 = 010 - next element is scale&cursor
	; 2nd line - set scale, lumi and cursor
	mov	#^B0000000000010000, (R0)+ ; no cursor
	mov	#^B0000000000000111, (R0)+ ; 640x288, max luminance (..00111-640, ..10111 - 320)
	clr	(R0)+			; vaddr is not used here
	mov	R0, (R0)
	add	#2, (R0)+		; next element is 2-words
	; 16 not used lines
	mov	#16., R3
10$:	clr	(R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 10$
	; 16 'empty' lines (BK-0010 is 256 lines screen, so 288-256/2 = 16
	mov	#16., R3
	call	GTVADR			; R1 <- VADDR
20$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 20$
	; next 256 'main' lines
	call	GTVADR
	mov	#256., R3
30$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	add	#64., R1		; double BK-0010 scr width
	sob	R3, 30$
	; last 16 empty lines
	call	GTVADR
	mov	#16., R3
40$:	mov	R1, (R0)+
	mov	R0, (R0)
	add	#2, (R0)+
	sob	R3, 40$
	; set new lines table
	mov	@#270, BKW270		; backup old table
	mov	@#272, BKW272
	clr	@#270
	bis	#6, R2			; first line is palette 
	mov	R2, @#272		; saved addr
	; queue process
	mov	PC, R0			; get proc addr
	add	#PPPGM1-., R0		;
	mov	R0, ADPGM1		; save for later use
	mov	R0, @#7124		; 7104.. (24(8) bytes) - processes addrs
	mov	#1, @#7100		; 7060.. (24(8) bytes) - processes status, 1-run
	; clear current command (phase 1 ready)
	mov	#PPCOMM/2, @#177010
	clr	@#177014
	return

; get current VADDR/2 in R1
GTVADR:	mov	#VBUF, R1
	add	#128., R1
	bic	#^B01111111, R1
	asr	R1
	return

; 'keyboard' interrupt
INTKB1:	mov	R0, -(SP)
	mov	@#177702, R0
	; TODO: change drawing variables in CPU from pressed keys
	bit	#^B10000000, R0
	bne	10$
	inc	KEYPR0
10$:	mov	(SP)+, R0
	rti
KEYPR0:	.word	0

; 'backup' values
BKW270:	.WORD	0
BKW272:	.WORD	0
BKW300:	.WORD	0

; lines table data
PPLIN1:	.BLKW	1200			; need 1150 (616.) words, but for .even 10 and whatever

; //////////////////////////////////////////////////////////////////////////////
; // PPU Process
; //////////////////////////////////////////////////////////////////////////////

ADPGM1:	.WORD	0			; address of process

PPPGM1:	mov	R0, -(SP)		; need to save R0 for PPU process
	tst	KEYPR0			; test for keypress to abort
	bne	10$			;
	; return to dispatcher
	mov	ADPGM1, @#7124		; re-queue process
	mov	#1, @#7100		; set for execution
99$:	mov	(SP)+, R0		; restore R0 (needed for dispatcher)
	jmp	@#174170		; jump to process dispatcher
10$:	; abort PPU process
	mtps	#200
	mov	BKW270, @#270		; restore lines table addr
	mov	BKW272, @#272
	mov	BKW300, @#300		; restore kbd interrupt
	clr	@#7100			; do not execute process again
	mov	#PPCOMM/2, @#177010	; control word addr
	clr	@#177014		; clear it
	mtps	#0
	br	99$

; //////////////////////////////////////////////////////////////////////////////
; // END PPU CODE 
; //////////////////////////////////////////////////////////////////////////////
PPUEND:

	
; //////////////////////////////////////////////////////////////////////////////
; // Manwe/SandS intro code here
; //////////////////////////////////////////////////////////////////////////////

KOSICH:

D1Ang	= 16.				; Cos offset
D1Var	= D1Acc+6

D1Spd:	br	D1Beg			; Y
	.word	36543,1321		; timer2, timer1
D1Acc:

D1Beg:
	; Clone sine table
	mov	#D1TBL+32., R1		; pointer to sine table
	mov	#32., R2
10$:	movb	D1TBL-1(R2), (R1)+
	sob	R2, 10$

Loop:	mov	#D1Acc, R3
	clr	(R3)+			; clear accums
	clr	(R3)+
	tst	(R3)+
	mov	#100, R0		; mask
D1Dir:	incb	(R3)			; default Y
	bne	10$
	xor	R0, D1Dir		; DEC opcode: 5313, INC opcode: 5213
10$:	mov	(R3)+, (R3)		; set Y
	mov	(R3)+, (R3)		; set timer2

	mov	VADDR, R0 		; screen address
	add	#420, R0

	; render twister to screen
Render:
	mov	#D1Spd, R4
	mov	#3, R3
10$:	add	(R4)+, 4(R4)		; add speed to accum
	adc	14(R4)			; increment variable
	sob	R3, 10$
	
	mov	#D1Var+6, R3		; pointer to variable array
	mov	(R3), R4		; get timer 1
	call	D1Sin
	swab	R5
	asl	R5
	mov	R5, D1Spd		; Y speed

	mov	-(R3), R4		; get timer 2
	call	D1Sin
	add	#64., R5		; shift from left side
	asr	R5
	asr	R5
	asl	R5			; in UKNC we are in WORDs
	mov	R5, R2			; horisontal shift

	mov	-(R3), R4		; get Y

	mov	R0, -(SP)		; set maximum
	mov	R0, -(SP)
	add	#128., (SP)		; set minimum

	mov	#8., R3
30$:	call	D1Sin			; R5=Sin(R4)
	mov	R5, R1
	asr	R1			; left coordinate
	add	#D1Ang, R4		; 90 degrees offset
	call	D1Sin			; R5=Sin(R4)
	asr	R5			; right coordinate
	sub	R1, R5			; length
	ble	70$
	bic	#177, R0		; new screen line
	add	R2, R0			; horisontal shift
	add	R1, R0
	add	R1, R0
	cmp	R0, (SP)		; minimum
	bhis	40$
	mov	R0, (SP)		; set new minimum
40$:	mov	D1Clr-2(R3), R1		; read colour
50$:	mov	R1, (R0)+
	sob	R5, 50$
	cmp	R0, 2(SP)		; maximum
	blos	60$
	mov	R0, 2(SP)		; set new maximum
60$:	bis	#^B1111000011110000, -(R0)		; draw border
70$:	dec	R3
	sob	R3, 30$

	mov	(SP)+, R5		; get minimum
	clr	-(R5)			; erase left pixels
	clr	-(R5)
	clr	-(R5)
	clr	-(R5)
	clr	-(R5)
	mov	(SP)+, R5		; get maxumum
	clr	(R5)+			; erase right pixels
	clr	(R5)+
	clr	(R5)+			; added one more clear
	clr	(R5)+

	add	#256., R0		; +2 screen lines
	cmp	R0, VADEN
	blo	Render			; end of screen?

	inc	Frames			; for FPS counting
	cmp	Frames, #50.
	blt	80$
	; print fps
	call	CouFps
	clr	Frames
	clr	Tick50
	mov	#MsgFp8, R0
	call	PriSt8

80$:	tst	PPCOMM			; +++ test for PPU asking to abort
	bne	Loop			; next frame if not

	return

; Sinus
; input: R4 - angle
; outpu: R5 - sinus
D1Sin:	mov	R4, R5
	bic	#177700, R5
	movb	D1Tbl(R5), R5
	return

	; were bytes 231,167,252,273
D1Clr:	.word	^B1010101001010101, ^B0101010111111111
	.word	^B1111111100000000, ^B1111111101010101

D1Tbl:	.byte	63.,62.,62.,61.,60.,58.,56.,54.,52.,50.,48.,45.,42.,39.,37.,33.
	.byte	31.,28.,25.,22.,19.,17.,14.,12.,10.,8.,6.,4.,3.,2.,2.,1.
	.even

	.blkw	32.	; buffer for sinetable cloning


; ///////////////////////////////////////////////////////////////////////////////////
; // Ripples demo
; ///////////////////////////////////////////////////////////////////////////////////

D2COLR:	.word	^B0000000001000100, ^B0001000101000100, ^B0101010100000000, ^B0111011100000000
	.word	^B1111111110001000, ^B1111111110101010, ^B1111111111101110, ^B1111111111111111
	.word	^B1010101010101010, ^B1010101010101010, ^B1010101010101010, ^B1010101010101010
	.word	^B1010101010101010, ^B1010101010101010, ^B1010101010101010, ^B1010101010101010

D2BWid = 48.

Riples:
	; clear buffers
	mov	#D2BUF1, R0
	mov	#D2BUFE-D2BUF1/2, R3
	clr	(R0)+
	sob	R3, .-2

RiplRN:	; render frame

D2BPRO:	; process buffers
	mov	#D2BWid*2+2+D2BUF1, R4	; 'previous' buffer addr
	mov	#D2BWid*2+2+D2BUF2, R5	; 'current' buffer addr
	bit	#1, FRAMES		; every frame they must be swapped
	beq	2$
	xor	R4, R5			; swap registers
	xor	R5, R4
	xor	R4, R5
2$:	; R4 - 'previous' buffer addr, R5 - 'current' buffer addr

	; add random dot in 'previous'
;	bit	#1, FRAMES		; i think it's ok for every frame
;	beq	10$
	call	Random			; R0 <- random word
	bic	#^B1111111111100000, R0	; R0 <- 0..31 random Y
	add	#7., R0			; add some shift (need to use D2BWid though)
	mul	#D2BWid*2, R0		; R1 <- buf addr by random line
	call	Random
	bic	#^B1111111111000001, R0	; R0 <- 0..62 (even) random X
	add	#16., R0		; center it by X (yes, need to use D2BWin also)
	add	R0, R1
	add	R4, R1
	mov	#31., (R1)

10$:	; process waves in two buffers
	mov	R5, -(SP)		; store addr of 'current' drawing buffer
	mov	#D2BWid-2, R2		; we have buffers by 1 element larger than screen render
20$:	mov	#D2BWid-2, R3		; so - process only 'inner' side
30$:	mov	2(R4), R0
	add	-2(R4), R0
	add	D2BWid*2(R4), R0
	add	-D2BWid*2(R4), R0
	asr	R0
	sub	(R5), R0
	bpl	40$			; must be 
	clr	R0			; in range of
40$:	bic	#^B1111111111100000, R0	; 0..31
	mov	R0, (R5)+
	inc	R4
	inc	R4
	sob	R3, 30$
	add	#4., R4			; skip buffer borders (2 words in beg and end)
	add	#4., R5
	sob	R2, 20$

D2REND:	; render 'current' buffer to screen
	mov	(SP)+, R5		; restore 'current' addr
	mov	VADDR, R0
	add	#128.*32.+32., R0	; skip some lines at screen (must use D2BWin also)
	mov	#256., R4		; +2 screen lines addition register
	mov	#D2BWid-2, R2
20$:	mov	#D2BWid-2, R3
30$:	mov	(R5)+, R1
	bic	#1, R1			; our colors are in words
	mov	D2COLR(R1), R1
	mov	R1, (R0)
	add	R4, R0
	mov	R1, (R0)
	sub	#256.-2, R0
	sob	R3, 30$
	add	#4, R5			; skip buffer borders
	add	#<128.*4>-<D2BWid-2*2>, R0	; next screen chunk line
	sob	R2, 20$

	inc	Frames			; for FPS counting
	cmp	Frames, #50.
	blt	80$
	; print fps
	call	CouFps
	clr	Frames
	clr	Tick50
	mov	#MsgFp8, R0
	call	PriSt8

80$:	tst	PPCOMM			; +++ test for PPU asking to abort
	bne	RiplRN
	return

; random with linear-feedback shift register (Galois)
; random -> R0
Random:	clc
	ror	(PC)+
Lfsr00:	.word	126341 		; 0ACE1
	bcc	Lfsr03
	mov	(PC)+, R0
Lfsr01:	.word	132000		; 0B400
	xor	R0, Lfsr00
Lfsr03:	mov	Lfsr00, R0
	return


; ///////////////////////////////////////////////////////////////////////////////////
; // Buffers, video RAM and whatever
; ///////////////////////////////////////////////////////////////////////////////////

D2BUF1:	.blkw	D2BWid*D2BWid
D2BUF2:	.blkw	D2BWid*D2BWid
D2BUFE:

VBUF:	.blkb	100000+512.	; I know it lol

	.END	START
