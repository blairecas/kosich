	.title	CPU
	.enabl	LC, AMA
	.list	MEB
	.asect
	.=1000

; //////////////////////////////////////////////////////////////////////////////
; // START
; //////////////////////////////////////////////////////////////////////////////

Start:	mtps	#200
	mov	#1000, SP

	; launch code in PPU
	call	StartPPU

	mov	#VsyInt, @#100
	mov	#200, @#102

	; run 'the same' in CPU
	mtps	#0
	jmp	Speed


; vsync interrupt
VsyInt:	inc	Tick50
	rti

MsgFp8:	.asciz	/00:00/
	.even

Font8:	.byte	0, 76, 147, 147, 147, 147, 177, 76
	.byte	0, 30, 34, 34, 30, 30, 176, 176
	.byte	0, 76, 163, 70, 34, 16, 177, 177
	.byte	0, 176, 60, 30, 60, 147, 177, 76
	.byte	0, 3, 3, 73, 177, 70, 70, 70
	.byte	0, 177, 7, 77, 140, 147, 177, 76
	.byte	0, 76, 7, 77, 147, 147, 177, 76
	.byte	0, 177, 161, 70, 34, 16, 7, 7
	.byte	0, 76, 147, 76, 147, 147, 177, 76
	.byte	0, 76, 147, 147, 176, 70, 34, 16
	.byte	0, 0, 0, 0, 0, 30, 30, 0
	.even 

; print string
; R0 - text addr
PriSt8:	mov	#Vaddr+4, R5
	mov	#128., R2		; vaddr addition
10$:	movb	(R0)+, R1		; get text byte
	beq	99$			; zero - exit
	sub	#'0, R1			; relative to '0'
	asl	R1			; *8 bytes (character font size)
	asl	R1
	asl	R1
	add	#Font8, R1		; R1 = font data
	.rept	8.			; out character
	movb	(R1)+, (R5)
	add	R2, R5
	.endr
	sub	#64.*2.*8.-2, R5	; advance vaddr
	br	10$
99$:	return 

; put 2 digits string
; R5 - where to put, R0 - number
Digi2:
	cmp	R0, #99.
	blos	10$
	mov	#99., R0
10$:	movb	#'0, (R5)+
	movb	#'0, (R5)+
20$:	mov	R0, R1
	clr	R0
	div	#10., R0
	add	#'0, R1
	movb	R1, -(R5)
	tst	R0
	bne	20$
	return

; count fps
CouFps:	mov	Frames, R0
	mul	#50., R0
	div	Tick50, R0
	; R0=FPS R1=FPS%TICK50
	mov	R1, -(SP)
	mov	#MsgFp8, R5
	call	Digi2
	mov	(SP)+, R0	; convert %TICK50 to hundreds
	mul	#100., R0	; *100/TICK50 = hundreds
	div	Tick50, R0	;
	mov	#MsgFp8+3, R5
	call	Digi2
	return


Frames:		.word	0
Tick50:		.word	0			; 50Hz ticks counter

VAddr		= 40000
VAden		= 127.*128. + VAddr 
TablSize	= 64.
Angle		= 16.				; Cos offset
Variable	= Accums+6 

Speed:	br	Begin				; Y
	.WORD	36543, 1321			; timer2, timer1
Accums: 

Begin:	; Clone sine table
	MOV	#Tabl+32., R1			; pointer to sine table
	MOV	#32., R2
10$:	MOVB	Tabl-1(R2), (R1)+
	SOB	R2, 10$

Loop:	MOV	#Accums, R3
	CLR	(R3)+				; clear accums
	CLR	(R3)+
	TST	(R3)+
	MOV	#100, R0			; mask
Direct:	INCB	(R3)				; default Y
	BNE	10$
	XOR	R0, Direct			; DEC opcode: 5313, INC opcode: 5213
10$:	MOV	(R3)+, (R3)			; set Y
	MOV	(R3)+, (R3)			; set timer2
	MOV	#5*128.+32+VAddr, R0		; screen address

; render twister to screen
Render:
	MOV	#Speed, R4
	MOV	#3, R3
10$:	ADD	(R4)+, 4(R4)			; add speed to accum
	ADC	14(R4)				; increment variable
	SOB	R3, 10$

	MOV	#Variable+6, R3			; pointer to variable array
	MOV	(R3), R4			; get timer 1
	CALL	Sin
	SWAB	R5
	ASL	R5
	MOV	R5, Speed			; Y speed

	MOV	-(R3), R4			; get timer 2
	CALL	Sin
	ADD	#32., R5
	ASR	R5
	ASR	R5
	MOV	R5, R2				; horisontal shift

	MOV	-(R3), R4			; get Y

	MOV	R0, -(SP)			; set maximum
	MOV	R0, -(SP)
	ADD	#128., (SP)			; set minimum

	MOV	#8., R3
30$:	CALL	Sin				; R5=Sin(R4)
	MOV	R5, R1
	ASR	R1				; left coordinate
	ADD	#Angle, R4			; 90 degrees offset
	CALL	Sin				; R5=Sin(R4)
	ASR	R5				; right coordinate
	SUB	R1, R5				; length
	BLE	70$
	BIC	#177, R0			; new screen line
	add	#32, R0
	ADD	R2, R0				; horisontal shift
	ADD	R1, R0
	ADD	R1, R0
	CMP	R0, (SP)			; minimum
	BGT	40$
	MOV	R0, (SP)			; set new minimum
40$:	MOV	Color-2(R3), R1			; read colour
50$:	MOV	R1, (R0)+
	SOB	R5, 50$
	CMP	R0, 2(SP)			; maximum
	BLOS	60$
	MOV	R0, 2(SP)			; set new maximum
60$:	bis	#^B1111000011110000, -(R0)		; draw border
70$:	dec	R3
	SOB	R3, 30$
	MOV	(SP)+, R5			; get minimum
	clr	-(R5)				; erase left pixels
	clr	-(R5)
	clr	-(R5)
	clr	-(R5)
	MOV	(SP)+, R5			; get maxumum
	clr	(R5)+				; erase right pixels
	clr	(R5)+
	clr	(R5)+
	clr	(R5)

	ADD	#128.*2, R0			; next screen line
	cmp	R0, #VAden	
	blo	Render				; end of screen?

	inc	Frames
	cmp	Frames, #50.
	blo	Loop

	; count and print fps
	call	CouFps
	clr	Frames
	clr	Tick50
	mov	#MsgFp8, R0
	call	PriSt8
	jmp	Loop

; Sinus
; input: R4 - angle
; outpu: R5 - sinus
Sin:	MOV	R4, R5
	BIC	#177700, R5
	MOVB	Tabl(R5), R5
	return

Color:	.word	^B1010101001010101, ^B0101010111111111
	.word	^B1111111100000000, ^B1111111101010101

Tabl:	.BYTE 63.,62.,62.,61.,60.,58.,56.,54.,52.,50.,48.,45.,42.,39.,37.,33.
	.BYTE 31.,28.,25.,22.,19.,17.,14.,12.,10.,8.,6.,4.,3.,2.,2.,1.

	.blkb	32.	; buffer for sinetable cloning


; registers for accessing vram (or ram12)
SetVreg:
	mov	#176640, R4
	mov	#176642, R5
	return	


; //////////////////////////////////////////////////////////////////////////////
; // CPU <-> PPU 
; //////////////////////////////////////////////////////////////////////////////

; PPU message
PPMSG:	.word	PPARR				; address of beginning of array
        .word	177777				; end of transmission

; PPU data exchange array
PPARR:	.byte	0				; return value (0 - OK)
PPCMD:	.byte	0				; command
	.word	32				; device type (32 - PPU mem)
PPAPP:	.word	0				; address for PPU
PPACP:	.word	0				; address for CPU
PPLEN:	.word	0				; length in words

; send command to PPU with exch array
PPSEN:	mov	#PPMSG, R0			; array address
	mov	#5, R1				; bytes to send+1 (sending from @#PP_MSG)
	br	1$
2$:	movb	(R0)+, @#176676
1$:	tstb	@#176674			; test if we are ready to send
	bpl	1$				; cycle if >= 0 (not set last bit in byte)
	sob	R1, 2$
	return

; send and start PPU code
; R4 - start addr in CPU
; R5 - length / 2
PPRUN:	movb	#1, PPCMD			; 1 - allocate memory
	mov	R5, PPLEN
	call	PPSEN			
	; (!) warn - no testing for success (!)
	movb	#20, PPCMD			; 20 - write to PPU mem
	mov	R5, PPLEN
	mov 	R4, PPACP
	call	PPSEN
	movb	#30, PPCMD			; 30 - run
	call	PPSEN
	return 

; //////////////////////////////////////////////////////////////////////////////
; // PPU Loader
; //////////////////////////////////////////////////////////////////////////////

; (!) this code will run in PPU
PPULoaderStart:
	mtps	#200
	clr	R0
	call	@7132(R0)			; stop FD
	; relocate code to the top of RAM
	mov	PC, R0
	add	#10$-., R0
	mov	#77400, R1
	mov	#200, R3
	mov	(R0)+, (R1)+
	sob	R3, .-2
	jmp	@#77400
10$:	; copy CPU VRAM -> PPU RAM
	mov	#177010, R4
	mov	#177014, R5
	mov	#100000, (R4)			; from vaddr = 100000
	clr	R0				; to addr = 0
	mov	#37600, R3			; 
	mov	(R5), (R0)+
	inc	(R4)
	sob	R3, .-4
	mov	#1000, SP			; stack on 1000
	jmp	(SP)				; jump there
PPULoaderEnd:

; send PPU code to VRAM and start PPU Loader
StartPPU:
	; put PPU code to VRAM
	call	SetVreg
	; clear vram first
	mov	#100000, (R4)
	mov	#40000, R3
	clr	(R5)
	inc	(R4)
	sob	R3, .-4
	; copy end of file to vram
	mov	#PPUStart, R0
	mov	#PPUEnd-PPUStart/2, R3
	mov	#100000, (R4)
	mov	(R0)+, (R5)
	inc	(R4)
	sob	R3, .-4
	; start PPU launcher code
	mov	#PPULoaderStart, R4
	mov	#<PPULoaderEnd-PPULoaderStart/2>, R5
	call	PPRUN
	return


; ////////////////////////////////////////////////////
; // PPU data block
; ////////////////////////////////////////////////////
PPUStart:
@include kosppu_cpu_ppu.mac
	.even
PPUEnd:

	.end	Start
